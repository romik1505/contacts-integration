// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/contact/contact_service.go

// Package mock_contact is a generated GoMock package.
package mock_contact

import (
	context "context"
	reflect "reflect"
	model "week3_docker/internal/model"
	schemas "week3_docker/internal/schemas"
	contact "week3_docker/pkg/api/contact_service"

	gomock "github.com/golang/mock/gomock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// AuthIntegration mocks base method.
func (m *MockIService) AuthIntegration(arg0 context.Context, arg1 *contact.AuthIntegrationRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthIntegration", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthIntegration indicates an expected call of AuthIntegration.
func (mr *MockIServiceMockRecorder) AuthIntegration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthIntegration", reflect.TypeOf((*MockIService)(nil).AuthIntegration), arg0, arg1)
}

// AutoRefreshTokens mocks base method.
func (m *MockIService) AutoRefreshTokens(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AutoRefreshTokens", ctx)
}

// AutoRefreshTokens indicates an expected call of AutoRefreshTokens.
func (mr *MockIServiceMockRecorder) AutoRefreshTokens(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoRefreshTokens", reflect.TypeOf((*MockIService)(nil).AutoRefreshTokens), ctx)
}

// ContactActionsHook mocks base method.
func (m *MockIService) ContactActionsHook(arg0 context.Context, arg1 schemas.ContactActionsHookRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContactActionsHook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContactActionsHook indicates an expected call of ContactActionsHook.
func (mr *MockIServiceMockRecorder) ContactActionsHook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContactActionsHook", reflect.TypeOf((*MockIService)(nil).ContactActionsHook), arg0, arg1)
}

// DoAddContacts mocks base method.
func (m *MockIService) DoAddContacts(ctx context.Context, task model.ContactActionsTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoAddContacts", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoAddContacts indicates an expected call of DoAddContacts.
func (mr *MockIServiceMockRecorder) DoAddContacts(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoAddContacts", reflect.TypeOf((*MockIService)(nil).DoAddContacts), ctx, task)
}

// DoDeleteContacts mocks base method.
func (m *MockIService) DoDeleteContacts(ctx context.Context, task model.ContactActionsTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoDeleteContacts", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoDeleteContacts indicates an expected call of DoDeleteContacts.
func (mr *MockIServiceMockRecorder) DoDeleteContacts(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDeleteContacts", reflect.TypeOf((*MockIService)(nil).DoDeleteContacts), ctx, task)
}

// DoPrimaryContactSync mocks base method.
func (m *MockIService) DoPrimaryContactSync(ctx context.Context, request *contact.ContactSyncRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoPrimaryContactSync", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoPrimaryContactSync indicates an expected call of DoPrimaryContactSync.
func (mr *MockIServiceMockRecorder) DoPrimaryContactSync(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoPrimaryContactSync", reflect.TypeOf((*MockIService)(nil).DoPrimaryContactSync), ctx, request)
}

// DoUpdateContacts mocks base method.
func (m *MockIService) DoUpdateContacts(ctx context.Context, task model.ContactActionsTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoUpdateContacts", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoUpdateContacts indicates an expected call of DoUpdateContacts.
func (mr *MockIServiceMockRecorder) DoUpdateContacts(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoUpdateContacts", reflect.TypeOf((*MockIService)(nil).DoUpdateContacts), ctx, task)
}

// GetAccount mocks base method.
func (m *MockIService) GetAccount(arg0 context.Context, arg1 *contact.GetAccountRequest) (*contact.GetAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*contact.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockIServiceMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockIService)(nil).GetAccount), arg0, arg1)
}

// InitSubscribeHook mocks base method.
func (m *MockIService) InitSubscribeHook(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitSubscribeHook", ctx)
}

// InitSubscribeHook indicates an expected call of InitSubscribeHook.
func (mr *MockIServiceMockRecorder) InitSubscribeHook(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitSubscribeHook", reflect.TypeOf((*MockIService)(nil).InitSubscribeHook), ctx)
}

// ListAccountIntegrations mocks base method.
func (m *MockIService) ListAccountIntegrations(arg0 context.Context, arg1 *contact.ListAccountIntegrationsRequest) (*contact.ListAccountIntegrationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountIntegrations", arg0, arg1)
	ret0, _ := ret[0].(*contact.ListAccountIntegrationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountIntegrations indicates an expected call of ListAccountIntegrations.
func (mr *MockIServiceMockRecorder) ListAccountIntegrations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountIntegrations", reflect.TypeOf((*MockIService)(nil).ListAccountIntegrations), arg0, arg1)
}

// ListAccounts mocks base method.
func (m *MockIService) ListAccounts(arg0 context.Context, arg1 *contact.ListAccountsRequest) (*contact.ListAccountsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0, arg1)
	ret0, _ := ret[0].(*contact.ListAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockIServiceMockRecorder) ListAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockIService)(nil).ListAccounts), arg0, arg1)
}

// ListContacts mocks base method.
func (m *MockIService) ListContacts(arg0 context.Context, arg1 *contact.ListContactsRequest) (*contact.ListContactsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContacts", arg0, arg1)
	ret0, _ := ret[0].(*contact.ListContactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContacts indicates an expected call of ListContacts.
func (mr *MockIServiceMockRecorder) ListContacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContacts", reflect.TypeOf((*MockIService)(nil).ListContacts), arg0, arg1)
}

// Login mocks base method.
func (m *MockIService) Login(ctx context.Context, account *model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockIServiceMockRecorder) Login(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIService)(nil).Login), ctx, account)
}

// PrimaryContactsSync mocks base method.
func (m *MockIService) PrimaryContactsSync(arg0 context.Context, arg1 schemas.ContactSyncRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrimaryContactsSync", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrimaryContactsSync indicates an expected call of PrimaryContactsSync.
func (mr *MockIServiceMockRecorder) PrimaryContactsSync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrimaryContactsSync", reflect.TypeOf((*MockIService)(nil).PrimaryContactsSync), arg0, arg1)
}

// UnsubAccount mocks base method.
func (m *MockIService) UnsubAccount(arg0 context.Context, arg1 *contact.UnsubAccountRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubAccount", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnsubAccount indicates an expected call of UnsubAccount.
func (mr *MockIServiceMockRecorder) UnsubAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubAccount", reflect.TypeOf((*MockIService)(nil).UnsubAccount), arg0, arg1)
}
