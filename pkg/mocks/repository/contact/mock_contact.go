// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/contact/repository.go

// Package mock_contact is a generated GoMock package.
package mock_contact

import (
	context "context"
	reflect "reflect"
	model "week3_docker/internal/model"
	contact "week3_docker/internal/repository/contact"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// CreateContact mocks base method.
func (m *MockIRepository) CreateContact(ctx context.Context, contact *model.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContact", ctx, contact)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContact indicates an expected call of CreateContact.
func (mr *MockIRepositoryMockRecorder) CreateContact(ctx, contact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContact", reflect.TypeOf((*MockIRepository)(nil).CreateContact), ctx, contact)
}

// DeleteAccountContacts mocks base method.
func (m *MockIRepository) DeleteAccountContacts(ctx context.Context, accountID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountContacts", ctx, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountContacts indicates an expected call of DeleteAccountContacts.
func (mr *MockIRepositoryMockRecorder) DeleteAccountContacts(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountContacts", reflect.TypeOf((*MockIRepository)(nil).DeleteAccountContacts), ctx, accountID)
}

// DeleteContact mocks base method.
func (m *MockIRepository) DeleteContact(ctx context.Context, contact *model.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContact", ctx, contact)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContact indicates an expected call of DeleteContact.
func (mr *MockIRepositoryMockRecorder) DeleteContact(ctx, contact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContact", reflect.TypeOf((*MockIRepository)(nil).DeleteContact), ctx, contact)
}

// DeleteContacts mocks base method.
func (m *MockIRepository) DeleteContacts(ctx context.Context, contacts []model.Contact) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContacts", ctx, contacts)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContacts indicates an expected call of DeleteContacts.
func (mr *MockIRepositoryMockRecorder) DeleteContacts(ctx, contacts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContacts", reflect.TypeOf((*MockIRepository)(nil).DeleteContacts), ctx, contacts)
}

// DeleteContactsByAmoIDs mocks base method.
func (m *MockIRepository) DeleteContactsByAmoIDs(ctx context.Context, amoIDs []uint64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContactsByAmoIDs", ctx, amoIDs)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContactsByAmoIDs indicates an expected call of DeleteContactsByAmoIDs.
func (mr *MockIRepositoryMockRecorder) DeleteContactsByAmoIDs(ctx, amoIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContactsByAmoIDs", reflect.TypeOf((*MockIRepository)(nil).DeleteContactsByAmoIDs), ctx, amoIDs)
}

// InsertContacts mocks base method.
func (m *MockIRepository) InsertContacts(ctx context.Context, contacts []model.Contact) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertContacts", ctx, contacts)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertContacts indicates an expected call of InsertContacts.
func (mr *MockIRepositoryMockRecorder) InsertContacts(ctx, contacts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertContacts", reflect.TypeOf((*MockIRepository)(nil).InsertContacts), ctx, contacts)
}

// ListContacts mocks base method.
func (m *MockIRepository) ListContacts(ctx context.Context, filter contact.ListContactsFilter) ([]model.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContacts", ctx, filter)
	ret0, _ := ret[0].([]model.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContacts indicates an expected call of ListContacts.
func (mr *MockIRepositoryMockRecorder) ListContacts(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContacts", reflect.TypeOf((*MockIRepository)(nil).ListContacts), ctx, filter)
}

// UpdateContact mocks base method.
func (m *MockIRepository) UpdateContact(ctx context.Context, contact *model.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContact", ctx, contact)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContact indicates an expected call of UpdateContact.
func (mr *MockIRepositoryMockRecorder) UpdateContact(ctx, contact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContact", reflect.TypeOf((*MockIRepository)(nil).UpdateContact), ctx, contact)
}

// UpdateContactsByAmoIDs mocks base method.
func (m *MockIRepository) UpdateContactsByAmoIDs(ctx context.Context, amoIDs []uint64, contact *model.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactsByAmoIDs", ctx, amoIDs, contact)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContactsByAmoIDs indicates an expected call of UpdateContactsByAmoIDs.
func (mr *MockIRepositoryMockRecorder) UpdateContactsByAmoIDs(ctx, amoIDs, contact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactsByAmoIDs", reflect.TypeOf((*MockIRepository)(nil).UpdateContactsByAmoIDs), ctx, amoIDs, contact)
}

// UpdateContactsByIDs mocks base method.
func (m *MockIRepository) UpdateContactsByIDs(ctx context.Context, ids []uint64, c *model.Contact) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactsByIDs", ctx, ids, c)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactsByIDs indicates an expected call of UpdateContactsByIDs.
func (mr *MockIRepositoryMockRecorder) UpdateContactsByIDs(ctx, ids, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactsByIDs", reflect.TypeOf((*MockIRepository)(nil).UpdateContactsByIDs), ctx, ids, c)
}
