// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/integration/repository.go

// Package mock_integration is a generated GoMock package.
package mock_integration

import (
	context "context"
	reflect "reflect"
	model "week3_docker/internal/model"
	integration "week3_docker/internal/repository/integration"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// CreateIntegration mocks base method.
func (m *MockIRepository) CreateIntegration(ctx context.Context, integration *model.Integration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIntegration", ctx, integration)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIntegration indicates an expected call of CreateIntegration.
func (mr *MockIRepositoryMockRecorder) CreateIntegration(ctx, integration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntegration", reflect.TypeOf((*MockIRepository)(nil).CreateIntegration), ctx, integration)
}

// DeleteIntegrations mocks base method.
func (m *MockIRepository) DeleteIntegrations(ctx context.Context, accountID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIntegrations", ctx, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIntegrations indicates an expected call of DeleteIntegrations.
func (mr *MockIRepositoryMockRecorder) DeleteIntegrations(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIntegrations", reflect.TypeOf((*MockIRepository)(nil).DeleteIntegrations), ctx, accountID)
}

// GetIntegration mocks base method.
func (m *MockIRepository) GetIntegration(ctx context.Context, integration *model.Integration) (model.Integration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegration", ctx, integration)
	ret0, _ := ret[0].(model.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegration indicates an expected call of GetIntegration.
func (mr *MockIRepositoryMockRecorder) GetIntegration(ctx, integration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegration", reflect.TypeOf((*MockIRepository)(nil).GetIntegration), ctx, integration)
}

// ListIntegration mocks base method.
func (m *MockIRepository) ListIntegration(ctx context.Context, filter integration.ListIntegrationFilter) ([]model.Integration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIntegration", ctx, filter)
	ret0, _ := ret[0].([]model.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIntegration indicates an expected call of ListIntegration.
func (mr *MockIRepositoryMockRecorder) ListIntegration(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIntegration", reflect.TypeOf((*MockIRepository)(nil).ListIntegration), ctx, filter)
}

// UpdateIntegration mocks base method.
func (m *MockIRepository) UpdateIntegration(ctx context.Context, integration *model.Integration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIntegration", ctx, integration)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIntegration indicates an expected call of UpdateIntegration.
func (mr *MockIRepositoryMockRecorder) UpdateIntegration(ctx, integration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIntegration", reflect.TypeOf((*MockIRepository)(nil).UpdateIntegration), ctx, integration)
}
