// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/contact_service/contact_service_grpc.pb.go

// Package mock_contact is a generated GoMock package.
package mock_contact

import (
	context "context"
	reflect "reflect"
	contact "week3_docker/pkg/api/contact_service"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockContactServiceClient is a mock of ContactServiceClient interface.
type MockContactServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockContactServiceClientMockRecorder
}

// MockContactServiceClientMockRecorder is the mock recorder for MockContactServiceClient.
type MockContactServiceClientMockRecorder struct {
	mock *MockContactServiceClient
}

// NewMockContactServiceClient creates a new mock instance.
func NewMockContactServiceClient(ctrl *gomock.Controller) *MockContactServiceClient {
	mock := &MockContactServiceClient{ctrl: ctrl}
	mock.recorder = &MockContactServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactServiceClient) EXPECT() *MockContactServiceClientMockRecorder {
	return m.recorder
}

// AuthIntegration mocks base method.
func (m *MockContactServiceClient) AuthIntegration(ctx context.Context, in *contact.AuthIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthIntegration", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthIntegration indicates an expected call of AuthIntegration.
func (mr *MockContactServiceClientMockRecorder) AuthIntegration(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthIntegration", reflect.TypeOf((*MockContactServiceClient)(nil).AuthIntegration), varargs...)
}

// GetAccount mocks base method.
func (m *MockContactServiceClient) GetAccount(ctx context.Context, in *contact.GetAccountRequest, opts ...grpc.CallOption) (*contact.GetAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*contact.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockContactServiceClientMockRecorder) GetAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockContactServiceClient)(nil).GetAccount), varargs...)
}

// ListAccountIntegrations mocks base method.
func (m *MockContactServiceClient) ListAccountIntegrations(ctx context.Context, in *contact.ListAccountIntegrationsRequest, opts ...grpc.CallOption) (*contact.ListAccountIntegrationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountIntegrations", varargs...)
	ret0, _ := ret[0].(*contact.ListAccountIntegrationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountIntegrations indicates an expected call of ListAccountIntegrations.
func (mr *MockContactServiceClientMockRecorder) ListAccountIntegrations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountIntegrations", reflect.TypeOf((*MockContactServiceClient)(nil).ListAccountIntegrations), varargs...)
}

// ListAccounts mocks base method.
func (m *MockContactServiceClient) ListAccounts(ctx context.Context, in *contact.ListAccountsRequest, opts ...grpc.CallOption) (*contact.ListAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccounts", varargs...)
	ret0, _ := ret[0].(*contact.ListAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockContactServiceClientMockRecorder) ListAccounts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockContactServiceClient)(nil).ListAccounts), varargs...)
}

// ListContacts mocks base method.
func (m *MockContactServiceClient) ListContacts(ctx context.Context, in *contact.ListContactsRequest, opts ...grpc.CallOption) (*contact.ListContactsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListContacts", varargs...)
	ret0, _ := ret[0].(*contact.ListContactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContacts indicates an expected call of ListContacts.
func (mr *MockContactServiceClientMockRecorder) ListContacts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContacts", reflect.TypeOf((*MockContactServiceClient)(nil).ListContacts), varargs...)
}

// UnsubAccount mocks base method.
func (m *MockContactServiceClient) UnsubAccount(ctx context.Context, in *contact.UnsubAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnsubAccount", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnsubAccount indicates an expected call of UnsubAccount.
func (mr *MockContactServiceClientMockRecorder) UnsubAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubAccount", reflect.TypeOf((*MockContactServiceClient)(nil).UnsubAccount), varargs...)
}

// MockContactServiceServer is a mock of ContactServiceServer interface.
type MockContactServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockContactServiceServerMockRecorder
}

// MockContactServiceServerMockRecorder is the mock recorder for MockContactServiceServer.
type MockContactServiceServerMockRecorder struct {
	mock *MockContactServiceServer
}

// NewMockContactServiceServer creates a new mock instance.
func NewMockContactServiceServer(ctrl *gomock.Controller) *MockContactServiceServer {
	mock := &MockContactServiceServer{ctrl: ctrl}
	mock.recorder = &MockContactServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactServiceServer) EXPECT() *MockContactServiceServerMockRecorder {
	return m.recorder
}

// AuthIntegration mocks base method.
func (m *MockContactServiceServer) AuthIntegration(arg0 context.Context, arg1 *contact.AuthIntegrationRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthIntegration", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthIntegration indicates an expected call of AuthIntegration.
func (mr *MockContactServiceServerMockRecorder) AuthIntegration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthIntegration", reflect.TypeOf((*MockContactServiceServer)(nil).AuthIntegration), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockContactServiceServer) GetAccount(arg0 context.Context, arg1 *contact.GetAccountRequest) (*contact.GetAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*contact.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockContactServiceServerMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockContactServiceServer)(nil).GetAccount), arg0, arg1)
}

// ListAccountIntegrations mocks base method.
func (m *MockContactServiceServer) ListAccountIntegrations(arg0 context.Context, arg1 *contact.ListAccountIntegrationsRequest) (*contact.ListAccountIntegrationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountIntegrations", arg0, arg1)
	ret0, _ := ret[0].(*contact.ListAccountIntegrationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountIntegrations indicates an expected call of ListAccountIntegrations.
func (mr *MockContactServiceServerMockRecorder) ListAccountIntegrations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountIntegrations", reflect.TypeOf((*MockContactServiceServer)(nil).ListAccountIntegrations), arg0, arg1)
}

// ListAccounts mocks base method.
func (m *MockContactServiceServer) ListAccounts(arg0 context.Context, arg1 *contact.ListAccountsRequest) (*contact.ListAccountsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0, arg1)
	ret0, _ := ret[0].(*contact.ListAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockContactServiceServerMockRecorder) ListAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockContactServiceServer)(nil).ListAccounts), arg0, arg1)
}

// ListContacts mocks base method.
func (m *MockContactServiceServer) ListContacts(arg0 context.Context, arg1 *contact.ListContactsRequest) (*contact.ListContactsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContacts", arg0, arg1)
	ret0, _ := ret[0].(*contact.ListContactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContacts indicates an expected call of ListContacts.
func (mr *MockContactServiceServerMockRecorder) ListContacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContacts", reflect.TypeOf((*MockContactServiceServer)(nil).ListContacts), arg0, arg1)
}

// UnsubAccount mocks base method.
func (m *MockContactServiceServer) UnsubAccount(arg0 context.Context, arg1 *contact.UnsubAccountRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubAccount", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnsubAccount indicates an expected call of UnsubAccount.
func (mr *MockContactServiceServerMockRecorder) UnsubAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubAccount", reflect.TypeOf((*MockContactServiceServer)(nil).UnsubAccount), arg0, arg1)
}

// MockUnsafeContactServiceServer is a mock of UnsafeContactServiceServer interface.
type MockUnsafeContactServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeContactServiceServerMockRecorder
}

// MockUnsafeContactServiceServerMockRecorder is the mock recorder for MockUnsafeContactServiceServer.
type MockUnsafeContactServiceServerMockRecorder struct {
	mock *MockUnsafeContactServiceServer
}

// NewMockUnsafeContactServiceServer creates a new mock instance.
func NewMockUnsafeContactServiceServer(ctrl *gomock.Controller) *MockUnsafeContactServiceServer {
	mock := &MockUnsafeContactServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeContactServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeContactServiceServer) EXPECT() *MockUnsafeContactServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedContactServiceServer mocks base method.
func (m *MockUnsafeContactServiceServer) mustEmbedUnimplementedContactServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedContactServiceServer")
}

// mustEmbedUnimplementedContactServiceServer indicates an expected call of mustEmbedUnimplementedContactServiceServer.
func (mr *MockUnsafeContactServiceServerMockRecorder) mustEmbedUnimplementedContactServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedContactServiceServer", reflect.TypeOf((*MockUnsafeContactServiceServer)(nil).mustEmbedUnimplementedContactServiceServer))
}
